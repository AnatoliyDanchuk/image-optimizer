[SOAP]
; Maybe used only by Amazon SDK now.
; @todo: investigate and recheck.
soap.wsdl_cache_enabled=1

; 1 day for wsdl cache allow speed up application
; and quick automatically fix issue of weird wsdl updating.
; Correct wsdl updating should not be updated but will be versioned.
soap.wsdl_cache_ttl=86400

; I think application use not more than 1000 wsdl.
; @todo: Investigate and test.
soap.wsdl_cache_limit=1000

; 2 = WSDL_CACHE_MEMORY.
; It should have tiny size but used by every request.
soap.wsdl_cache=2


;suppress inspection for section "SpellCheckingInspection"
[opcache]
; @see http://0.0.0.0:8000/analyse_opcache with test.env
; @see https://rtfm.co.ua/php-keshirovanie-php-skriptov-nastrojka-i-tyuning-opcache/

; Increase performance for production only.
opcache.preload=/opt/symfony/preload.php

; The OPcache shared memory storage size.
; last used 12.52MB with test.env
opcache.memory_consumption=20

; The amount of memory for interned strings in MBytes.
; last used 1.34MB with test.env
opcache.interned_strings_buffer=4

; @todo: test and fix
; last value 456 with test.env
opcache.max_accelerated_files=983

; The maximum percentage of "wasted" memory until a restart is scheduled.
; Other settings deny recheck if files are changed.
; Thus we don't need many memory for this param.
; 1 - is minimal allowed value
opcache.max_wasted_percentage=1

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
; @todo: not sure, left as is
;opcache.use_cwd=1

; We should start application from scratch and warn up on anyway after deploy
opcache.validate_timestamps=0

; Enables or disables file search in include_path optimization
opcache.revalidate_path=0

opcache.save_comments=0

; If enabled, compilation warnings (including notices and deprecations) will
; be recorded and replayed each time a file is included. Otherwise, compilation
; warnings will only be emitted when the file is first cached.
opcache.record_warnings=0

; Allow file existence override (file_exists, etc.) performance feature.
; @todo: I am not sure but maybe Symfony expect opcache.enable_file_override=0
; @todo: test
opcache.enable_file_override=1

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
; @todo: not sure, left as is
;opcache.optimization_level=0x7FFFBFFF

; Used only for fix situations with "Cannot redeclare class"
; @todo: not sure, left as is
;opcache.dups_fix=0

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated. The file format is to add each filename
; to a new line. The filename may be a full path or just a file prefix
; (i.e., /var/www/x  blacklists all the files and directories in /var/www
; that start with 'x'). Line starting with a ; are ignored (comments).
; @todo: not sure, left as is
;opcache.blacklist_filename=

; Allows exclusion of large files from being cached. By default all files
; are cached.
opcache.max_file_size=0

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
opcache.consistency_checks=0

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
; @todo: test and decrease
opcache.force_restart_timeout=10

; OPcache error_log file name. Empty string assumes "stderr".
opcache.error_log=

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
; 2 allow log when opcache.force_restart_timeout is used
opcache.log_verbosity_level=2

; Preferred Shared Memory back-end. Leave empty and let the system decide.
opcache.preferred_memory_model=

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
opcache.protect_memory=0

; Allows calling OPcache API functions only from PHP scripts which path is
; started from specified string. The default "" means no restriction
; @todo: not sure Symfony use it or not
;opcache.restrict_api=

; Enables and sets the second level cache directory.
; It should improve performance when SHM memory is full, at server restart or
; SHM reset. The default "" disables file based caching.
opcache.file_cache=

; Enables or disables opcode caching in shared memory.
opcache.file_cache_only=0

; Enables or disables checksum validation when script loaded from file cache.
opcache.file_cache_consistency_checks=0

; Enables or disables copying of PHP code (text segment) into HUGE PAGES.
; This should improve performance, but requires appropriate OS configuration.
; @todo: investigate
;opcache.huge_code_pages=1

; Validate cached file permissions.
opcache.validate_permission=0

; Prevent name collisions in chroot environment.
; @todo: not sure, left as is
;opcache.validate_root=0

; Preloading code as root is not allowed for security reasons. This directive
; facilitates to let the preloading to be run as another user.
; http://php.net/opcache.preload_user
; Current user in php-fpm now is already www-data.
; Thus if set www-data to this config we will have warning in startup log:
; (1): Warning "opcache.preload_user" is ignored
opcache.preload_user=

; Prevents caching files that are less than this number of seconds old. It
; protects from caching of incompletely updated files. In case all file updates
; on your site are atomic, you may increase performance by setting it to "0".
opcache.file_update_protection=0

; Absolute path used to store shared lock files (for *nix only).
opcache.lockfile_path=/tmp
